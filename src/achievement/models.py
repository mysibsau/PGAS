import uuid
from datetime import datetime

from django.db import models
from django.utils.functional import cached_property
from django.utils.translation import gettext_lazy as _

from comment.mixins import ModelMixin as CommentMixin
from document.mixins import ModelMixin as DocumentMixin
from statement.models import Statement


class Base(CommentMixin, DocumentMixin):
    id = models.UUIDField(_("ID"), default=uuid.uuid4, primary_key=True, editable=False, unique=True, db_index=True)
    name = models.CharField("–ù–∞–∑–≤–∞–Ω–∏–µ", max_length=255)
    author = models.ForeignKey("user.User", on_delete=models.CASCADE, related_name="%(class)ss")
    statement = models.ForeignKey(Statement, on_delete=models.CASCADE, related_name="%(class)ss")
    status = models.IntegerField("–°—Ç–∞—Ç—É—Å", choices=Statement.Status.choices, default=Statement.Status.PENDING)
    date = models.DateField("–î–∞—Ç–∞ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏—è", default=datetime.now)

    class Meta:
        abstract = True

    def pretty_status(self) -> str:
        html = '<span data-toggle="tooltip" data-placement="top" title="%s">%s</span>'
        status = {
            Statement.Status.PENDING: html % ("–í –æ–±—Ä–∞–±–æ—Ç–∫–µ", 'ü§î'),
            Statement.Status.APPROVED: html % ("–ü—Ä–∏–Ω—è—Ç–æ", '‚úÖ'),
            Statement.Status.REJECTED: html % ("–û—Ç–∫–ª–æ–Ω–µ–Ω–æ", '‚ùå'),
        }

        return status[self.status]

    @cached_property
    def score(self) -> int:
        if self.status == Statement.Status.APPROVED:
            return self.preliminary_scores
        return 0

    @property
    def actual(self) -> bool:
        if datetime.now().month >= 9:
            return self.date.year == datetime.now().year
        return self.date.year == datetime.now().year - 1 or self.date.year == datetime.now().year


class Olympiad(Base):
    class Place(models.IntegerChoices):
        FIRST = 1, "ü•á–ü–µ—Ä–≤–æ–µ"
        SECOND = 2, "ü•à–í—Ç–æ—Ä–æ–µ"
        THIRD = 3, "ü•â–¢—Ä–µ—Ç—å–µ"
        PARTICIPANT = 4, "–£—á–∞—Å—Ç–Ω–∏–∫"

    class Level(models.IntegerChoices):
        INTERNATIONAL = 1, "–ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–π"
        FEDERAL = 2, "–í—Å–µ—Ä–æ—Å—Å–∏–π—Å–∫–∏–π"
        DEPARTMENTAL = 3, "–í–µ–¥–æ–º—Å—Ç–≤–µ–Ω–Ω—ã–π"
        INNER = 4, "–†–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–π"

    place = models.IntegerField("–ó–∞–Ω—è—Ç–æ–µ –º–µ—Å—Ç–æ", choices=Place.choices, default=Place.PARTICIPANT)
    level = models.IntegerField("–£—Ä–æ–≤–µ–Ω—å –æ–ª–∏–º–ø–∏–∞–¥—ã", choices=Level.choices, default=Level.INNER)

    @cached_property
    def preliminary_scores(self) -> int:
        table = {
            Olympiad.Level.INTERNATIONAL: [12, 11, 10, 8],
            Olympiad.Level.FEDERAL: [9, 8, 7, 5],
            Olympiad.Level.DEPARTMENTAL: [8, 7, 6, 4],
            Olympiad.Level.INNER: [7, 6, 5, 3],
        }
        return table[self.level][self.place - 1]

    class Meta:
        verbose_name = "–û–ª–∏–º–ø–∏–∞–¥–∞"
        verbose_name_plural = "–û–ª–∏–º–ø–∏–∞–¥—ã"


class Patent(Base):
    class Type(models.IntegerChoices):
        INVENTION = 1, "–ü–∞—Ç–µ–Ω—Ç –Ω–∞ –∏–∑–æ–±—Ä–µ—Ç–µ–Ω–∏–µ, —Å–≤–∏–¥–µ—Ç–µ–ª—å—Å—Ç–≤–æ"
        UTILITY_MODEL = 2, "–ü–∞—Ç–µ–Ω—Ç –Ω–∞ –ø–æ–ª–µ–∑–Ω—É—é –º–æ–¥–µ–ª—å"
        APPLICATION = 3, "–ó–∞—è–≤–∫–∞"

    type = models.IntegerField("–¢–∏–ø –ø–∞—Ç–µ–Ω—Ç–∞", choices=Type.choices, default=Type.INVENTION)

    @cached_property
    def preliminary_scores(self) -> int:
        table = {
            Patent.Type.INVENTION: 30,
            Patent.Type.UTILITY_MODEL: 20,
            Patent.Type.APPLICATION: 5,
        }
        return table[self.type]

    class Meta:
        verbose_name = "–ü–∞—Ç–µ–Ω—Ç"
        verbose_name_plural = "–ü–∞—Ç–µ–Ω—Ç—ã"


class Article(Base):
    class Type(models.IntegerChoices):
        SCOPUS = 1, "Web of Science/Scopus"
        VAK = 2, "–í–ê–ö"
        RINC = 3, "–†–ò–ù–¶"
        OTHER = 4, "–û—Å—Ç–∞–ª—å–Ω–æ–µ"

    type = models.IntegerField("–¢–∏–ø –ø—É–±–ª–∏–∫–∞—Ü–∏–∏", choices=Type.choices, default=Type.OTHER)
    url = models.URLField('–°—Å—ã–ª–∫–∞')
    count_coauthors = models.IntegerField("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–∞–≤—Ç–æ—Ä–æ–≤", default=0)

    @cached_property
    def preliminary_scores(self) -> int:
        table = {
            Article.Type.SCOPUS: 40,
            Article.Type.VAK: 30,
            Article.Type.RINC: 4,
            Article.Type.OTHER: 1,
        }
        return table[self.type]

    class Meta:
        verbose_name = "–ü—É–±–ª–∏–∫–∞—Ü–∏—è"
        verbose_name_plural = "–ü—É–±–ª–∏–∫–∞—Ü–∏–∏"
